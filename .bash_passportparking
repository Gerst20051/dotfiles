# PassportParking Aliases

# Grep Current Directory for Phrase
function f {
	grep -r "$1" *
}

# Grep Git Log History for Phrase
function flog {
	glp | grep "$1"
}

# Checkout Bug Branch From Production Branch
function newbug {
	if [ "$#" -ne 1 ]; then
		echo "1 argument required, $# provided"
		return
	fi
	echo $1 | grep -E -q '^[0-9]+$'
	if [ $? -ne 0 ]; then
		echo "Numeric argument required, $1 provided"
		return
	fi
	git checkout production &&
	git pull origin production &&
	git checkout -b bug_"$1"
}

# Sync Bug Branch With Production Branch
function syncbug {
	if [ "$#" -ne 1 ]; then
		echo "1 argument required, $# provided"
		return
	fi
	echo $1 | grep -E -q '^[0-9]+$'
	if [ $? -ne 0 ]; then
		echo "Numeric argument required, $1 provided"
		return
	fi
	git checkout production &&
	git pull origin production &&
	git checkout bug_"$1" &&
	git merge --no-ff -m "Merge branch production into 'bug_$1'" production
}

# Sync Bug Branch With Staging Branch
function syncbugstag {
	if [ "$#" -ne 1 ]; then
		echo "1 argument required, $# provided"
		return
	fi
	echo $1 | grep -E -q '^[0-9]+$'
	if [ $? -ne 0 ]; then
		echo "Numeric argument required, $1 provided"
		return
	fi
	git checkout staging &&
	git pull origin staging &&
	git checkout bug_"$1" &&
	git merge --no-ff -m "Merge branch staging into 'bug_$1'" staging
}

# Sync Staging Branch With Production Branch
function syncstagwithprod {
	git checkout production &&
	git pull origin production &&
	git checkout staging &&
	git pull origin staging &&
	git merge --no-ff -m "Syncing staging branch with production branch" production &&
	git push origin staging
}

# Commit Bug Branch Changes
function mergebug {
	if [ "$#" -ne 1 ]; then
		echo "1 argument required, $# provided"
		return
	fi
	echo $1 | grep -E -q '^[0-9]+$'
	if [ $? -ne 0 ]; then
		echo "Numeric argument required, $1 provided"
		return
	fi
	git checkout bug_"$1" &&
	git commit -m "updated bug_$1"
}

# Merge Bug Branch Commits Into Stag and Prod Branches
function mergeall {
	if [ "$#" -ne 1 ]; then
		echo "1 argument required, $# provided"
		return
	fi
	echo $1 | grep -E -q '^[0-9]+$'
	if [ $? -ne 0 ]; then
		echo "Numeric argument required, $1 provided"
		return
	fi
        mergestag "$@" &&
        mergeprod "$@"
}

# Merge Bug Branch Commits Into Staging Branch
function mergestag {
	if [ "$#" -ne 1 ]; then
		echo "1 argument required, $# provided"
		return
	fi
	echo $1 | grep -E -q '^[0-9]+$'
	if [ $? -ne 0 ]; then
		echo "Numeric argument required, $1 provided"
		return
	fi 
	git checkout bug_"$1" &&
	git checkout staging &&
	git pull origin staging &&
	git merge --no-ff -m "Merge branch 'bug_$1' into staging" bug_"$1" &&
        git push origin staging &&
        git checkout bug_"$1"
}

# Merge Bug Branch Commits Into Production Branch
function mergeprod {
	if [ "$#" -ne 1 ]; then
		echo "1 argument required, $# provided"
		return
	fi
	echo $1 | grep -E -q '^[0-9]+$'
	if [ $? -ne 0 ]; then
		echo "Numeric argument required, $1 provided"
		return
	fi 
	git checkout bug_"$1" &&
	git checkout production &&
	git pull origin production &&
	git merge --no-ff -m "Merge branch 'bug_$1' into production" bug_"$1" &&
        git push origin production &&
        git checkout bug_"$1"
}

# Sync Stag and Prod Branches With Remote Branches
function syncbranches {
	git fetch
	echo $'\n'
	git checkout production &&
	git pull origin production
	echo $'\n'
	git checkout staging &&
	git pull origin staging
}

# Sync Master Branch With Remote Branch
function syncmasterbranch {
	git fetch
	echo $'\n'
	git checkout master &&
	git pull origin master
}

# Sync Staging Branch With Production Branch For All Repos
function syncstagrepos {
        pwd=${PWD}
        remote="origin"
        repos=(
		'custom'
		'delayedproc'
		'delayedproc2'
		'mobile'
		'mobilepayweb'
		'mobilepaywin'
		'notifications'
		'opmgmt'
		'parkenforcer'
		'parkmonitor'
		'passportwebsite'
		'paymentgateway'
		'rate'
		'shared'
		'strings'
		'tlotest'
		'validation'
		'violations'
	)
	echo $'\n\E[35m'
        echo "Syncing Staging With Production For Repos: ${repos[@]}"
        sleep 2
        for repo in "${repos[@]}"; do
		echo $'\n\E[31m'
		message="Syncing Staging With Production For Repo '"
		message+=$'\E[36m'
		message+=$repo
		message+=$'\E[31m'
		message+="'"
		message+=$'\E[37m'
		echo $message
		\cd ~/PP/Code/$repo &&
	        syncstagwithprod
                sleep 2
        done
        echo $'\n\n\E[31m'
        message="Finished Syncing Staging With Production For All Repos! Current Directory: "
        message+=$'\E[33m'
        message+="${pwd}"
        message+=$'\E[37m'
        echo $message && echo $'\n' &&
        cd ${pwd}
}

# Sync Stag and Prod Branches OR Master Branch For All Repos
function syncrepos {
        pwd=${PWD}
        remote="origin"
        repos=(
		'centralpay'
		'centralpaydevice'
		'custom'
		'delayedproc'
		'delayedproc2'
		'initscripts'
		'kegerator'
		'migration'
		'mobile'
		'mobileapp'
		'mobilepayweb'
		'mobilepaywin'
		'notifications'
		'operator'
		'opmgmt'
		'parkenforcer'
		'parkmonitor'
		'passportwebsite'
		'paymentgateway'
		'ppconfig'
		'produpdate'
		'rate'
		'reservations'
		'sandbox'
		'shared'
		'strings'
		'test'
		'testing'
		'tlotest'
		'validation'
		'violations'
	)
	echo $'\n\E[35m'
        echo "Syncing Repos: ${repos[@]}"
        sleep 2
        for repo in "${repos[@]}"; do
		echo $'\n\E[31m'
		message="Syncing Repo '"
		message+=$'\E[36m'
		message+=$repo
		message+=$'\E[31m'
		message+="' Branches"
		message+=$'\E[37m'
		echo $message
		function="syncbranches"
		if [[
			$repo == "centralpay" ||
			$repo == "centralpaydevice" ||
			$repo == "initscripts" ||
			$repo == "kegerator" ||
			$repo == "migration" ||
			$repo == "mobileapp" ||
			$repo == "operator" ||
			$repo == "ppconfig" ||
			$repo == "produpdate" ||
			$repo == "reservations" ||
			$repo == "sandbox" ||
			$repo == "test" ||
			$repo == "testing"
		]]; then
			function="syncmasterbranch"
		fi
		\cd ~/PP/Code/$repo &&
	        ${function}
                sleep 2
        done
        echo $'\n\n\E[31m'
        message="Finished Syncing All Repo Branches! Current Directory: "
        message+=$'\E[33m'
        message+="${pwd}"
        message+=$'\E[37m'
        echo $message && echo $'\n' &&
        cd ${pwd}
}

# Lsyncd Aliases (VirtualBox Server Syncing)
alias lsyncdcustom="sudo lsyncd '/Users/passport/lsyncd/ppconfig/repocustom.lua'"
alias lsyncddp2="sudo lsyncd '/Users/passport/lsyncd/ppconfig/repodelayedproc2.lua'"
alias lsyncdmpw="sudo lsyncd '/Users/passport/lsyncd/ppconfig/repomobilepayweb.lua'"
alias lsyncdmobile="sudo lsyncd '/Users/passport/lsyncd/ppconfig/repomobile.lua'"
alias lsyncdnot="sudo lsyncd '/Users/passport/lsyncd/ppconfig/reponotifications.lua'"
alias lsyncdopmgmt="sudo lsyncd '/Users/passport/lsyncd/ppconfig/repoopmgmt.lua'"
alias lsyncdpm="sudo lsyncd '/Users/passport/lsyncd/ppconfig/repoparkmonitor.lua'"
alias lsyncdpg="sudo lsyncd '/Users/passport/lsyncd/ppconfig/repopaymentgateway.lua'"
alias lsyncdppc="sudo lsyncd '/Users/passport/lsyncd/ppconfig/repoppconfig.lua'"
alias lsyncdrate="sudo lsyncd '/Users/passport/lsyncd/ppconfig/reporate.lua'"
alias lsyncdshared="sudo lsyncd '/Users/passport/lsyncd/ppconfig/reposhared.lua'"
alias lsyncdstrings="sudo lsyncd '/Users/passport/lsyncd/ppconfig/repostrings.lua'"
alias lsyncdvalidation="sudo lsyncd '/Users/passport/lsyncd/ppconfig/repovalidation.lua'"
alias lsyncdviolations="sudo lsyncd '/Users/passport/lsyncd/ppconfig/repoviolations.lua'"

# Start SSH Tunnels
function start_tunnels {
	kill_tunnels
	echo $'\E[36m'
	echo "Starting Tunnels"
	ssh -f -L 8080:localhost:80 ppinfo -N
	ssh -f -L 8181:localhost:80 easypparking -N
	ssh -f -L 8282:localhost:80 myeasyp -N
	ssh -f -L 8383:localhost:8080 myeasyp -N
	ssh -f -L 8484:localhost:80 cseasyp -N
	echo $'\E[33m'
	echo "All Tunnels Have Been Started!"
}

# Kill SSH Tunnels
function kill_tunnels {
	ports=('8080' '8181' '8282' '8383' '8484')
	echo $'\E[31m'
	echo "Killing Tunnels: ${ports[@]}"
	echo $'\E[37m'
	for port in "${ports[@]}"; do
		pid=$(pgrep -f $port":localhost")
		if [[ "$pid" -gt 0 ]]; then
			kill $pid
			message=$'\E[35m'
			message+="Killed Tunnel With Port: '"
			message+=$'\E[36m'
			message+=$port
			message+=$'\E[35m'
			message+="' and PID: '"
			message+=$'\E[36m'
			message+=$pid
			message+=$'\E[35m'
			message+="'"
			message+=$'\E[37m'
			echo $message
		fi
	done
	echo $'\E[33m'
	echo "All Tunnels Have Been Killed!"
}

# Find Tunnel Process
function find_tunnel {
	ps aux | grep ssh | grep "$1"
}

